%Max 2^NN_max = 8;%Defines the functions given in the exerisesf1 = @(x,y) 2*(-x.^2+x-y.^2+y);g1 = @(x,y) 0;u1 = @(x,y) (x.^2-x).*(y.^2-y);f2 = @(x,y) -4 *ones(size(x));g2 = @(x,y) x.^2+y.^2;u2 = @(x,y) x.^2+y.^2;f3 = @(x,y) 2*pi^2*sin(pi*x).*sin(pi*y);g3= @(x,y) 0;u3 = @(x,y) sin(pi*x).*sin(pi*y);f = {f1,f2,f3};g = {g1,g2,g3};u ={u1,u2,u3};%Allocation for the error and gridsizeerrors = zeros(3,N_max-1);hs = zeros(3,N_max-1);for i=2:N_max  %Grid points along axis  N = 2^i    %Discrete Laplace  A = OperatorAssembler(N);    %Refrence Grid on the interior of Omega  x = linspace(0,1,N+1)(2:end-1);  [X,Y] = meshgrid(x,x);    % Loops over the Functions  for j=1:3      % Call defined function    F = FunctionalAssembler(f{j},g{j},N);      %Calculation of U    U = A\F;      %Refrence solution    u_n = reshape(u{j}(X,Y),(N-1)*(N-1),1);      % Max Error     errors(j,i-1) = max(abs(U-u_n));    hs(j,i-1) = 1/N;      %plots    fig = figure("visible","on");    imshow(reshape(U,N-1,N-1));    colormap jet;    caxis('auto')    colorbar;    title(strcat("Solution of f",num2str(j)," and g",num2str(j), " with N = ", num2str(N)));    xlabel("x")    ylabel("y")    print(fig,strcat("solution_f",num2str(j),"_",num2str(N),".png"),"-dpng");    close(fig);   endend%Error plotfig = figure("visible","on");loglog(hs',errors', hs(1,:),hs(1,:),hs(1,:),hs(1,:).^2);title("Max error over h");legend("f1","f2","f3","h^1","h^2")xlabel("h");ylabel("max Error");print(fig,"error.png","-dpng");close(fig);